<?xml version="1.0"?>
<!--
Software License Agreement (BSD)

\file      propbot-model.urdf.xacro
\authors   Paul Bovbel <pbovbel@clearpathrobotics.com>, Devon Ash <dash@clearpathrobotics.com>
\copyright Copyright (c) 2015, Clearpath Robotics, Inc., All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that
the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the
   following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
   following disclaimer in the documentation and/or other materials provided with the distribution.
 * Neither the name of Clearpath Robotics nor the names of its contributors may be used to endorse or promote
   products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WAR-
RANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, IN-
DIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<!-- NOTES
==============================================================================================================
* All values are in metric (m, kg)
* Specific robot structure values extracted from URDF exported from Solidworks
-->
<robot name="propbot" xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:arg name="laser_enabled" default="false" />
  <xacro:arg name="laser_xyz" default="$(optenv PROPBOT_VLP-16_XYZ 0.2206 0.0 0.00635)" />
  <xacro:arg name="laser_rpy" default="$(optenv PROPBOT_VLP-16_RPY 0.0 0.0 0.0)" />

  <xacro:arg name="rgbd_camera_enabled" default="false" />
  <xacro:arg name="rgbd_camera_xyz" default="$(optenv PROPBOT_REALSENSE_XYZ 0 0 0)" />
  <xacro:arg name="rgbd_camera_rpy" default="$(optenv PROPBOT_REALSENSE_RPY 0 0.18 3.14)" />

  <xacro:arg name="robot_namespace" default="/" />
  <xacro:arg name="spawn_lat" default="49.9" />
  <xacro:arg name="spawn_long" default="8.9" />

  <!-- Included URDF/XACRO Files -->
  <xacro:include filename="$(find propbot_description)/urdf/decorations.urdf.xacro" />
  <xacro:include filename="$(find propbot_description)/urdf/wheel.urdf.xacro" />
  <xacro:include filename="$(find propbot_description)/urdf/accessories/realsense_d435.urdf.xacro"/>
  <xacro:include filename="$(find propbot_description)/urdf/accessories/sensor_arch.urdf.xacro"/>
  <xacro:include filename="$(find propbot_description)/urdf/accessories/VLP-16_mount.urdf.xacro"/>

  <!-- Define Constant(s) -->
  <xacro:property name="M_PI" value="3.14159"/>

  <!-- Wheel Properties -->
  <xacro:property name="wheel_radius" value="0.127" />

  <!-- Wheel Mounting Positions -->
  <xacro:property name="wheel_to_wheel" value="0.400" /> <!-- distance between wheel axles -->
  <xacro:property name="track" value="0.9198" /> <!-- y wheel distance, wheel central point to central point -->
  <xacro:property name="wheel_vertical_offset" value="${wheel_radius}" /> <!-- axle to ground distance -->
  <xacro:property name="wheel_central_offset" value="0.0533" /> <!-- offset from the center -->

  <!-- Base Size -->
  <xacro:property name="base_x_size" value="0.9820" /> <!-- x is front to back -->
  <xacro:property name="base_y_size" value="0.8278" /> <!-- y is side to side -->
  <xacro:property name="base_z_size" value="0.1369" /> <!-- height of the bottom battery plate from the ground -->


  <!-- Base link is the center of the robot's bottom plate -->
  <link name="base_link">
    <visual>
      <origin xyz="0 0 ${base_z_size}" rpy="0 0 0" />
      <geometry>
        <mesh filename="package://propbot_description/meshes/propbot_base_link.STL" />
      </geometry>
    </visual>
    <collision>
      <origin xyz="0 0 ${base_z_size/4}" rpy="0 0 0" />
      <geometry>
        <box size="${base_x_size} ${base_y_size} ${base_z_size/2}"/>
      </geometry>
    </collision>
    <collision>
      <origin xyz="0 0 ${base_z_size*3/4-0.01}" rpy="0 0 0" />
      <geometry>
        <box size="${base_x_size*4/5} ${base_y_size} ${base_z_size/2-0.02}"/>
      </geometry>
    </collision>
  </link>

  <!-- Base footprint is on the ground under the robot -->
  <link name="base_footprint"/>

  <joint name="base_footprint_joint" type="fixed">
    <origin xyz="0 0 ${wheel_vertical_offset - wheel_radius}" rpy="0 0 0" />
    <parent link="base_link" />
    <child link="base_footprint" />
  </joint>

  <!-- Interial link stores the robot's inertial information 
       For this case, the mass, origin, and inertia values of the main chassis is used
  -->
  <link name="inertial_link">
    <inertial>
      <mass value="19.52246" />
      <origin xyz="-0.004962 0.106799 0.42243" />
      <inertia ixx="0.42226" ixy="0.00028" ixz="-0.00012" iyy="0.46973" iyz="0.000170" izz="0.16238" />
    </inertial>
  </link>

  <joint name="inertial_joint" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <parent link="base_link" />
    <child link="inertial_link" />
  </joint>

  <!-- IMU Link is the standard mounting position for the UM6 IMU.-->
  <!-- Can be modified with environment variables in /etc/ros/setup.bash -->
  <link name="imu_link"/>
  <joint name="imu_joint" type="fixed">
    <origin xyz="$(optenv PROPBOT_IMU_XYZ 0.19 0 0.149)" rpy="$(optenv PROPBOT_IMU_RPY 0 -1.5708 3.1416)" />
    <parent link="base_link" />
    <child link="imu_link" />
  </joint>
  <gazebo reference="imu_link">
  </gazebo>

  <!-- Propbot wheel macros -->
  <xacro:propbot_wheel wheel_prefix="front_left">
    <origin xyz="${track/2} ${wheel_to_wheel + wheel_central_offset} ${wheel_vertical_offset}" rpy="0 ${M_PI} 0" />
  </xacro:propbot_wheel>
  <xacro:propbot_wheel wheel_prefix="front_right">
    <origin xyz="${-track/2} ${wheel_to_wheel + wheel_central_offset} ${wheel_vertical_offset}" rpy="0 0 0" />
  </xacro:propbot_wheel>
  <xacro:propbot_wheel wheel_prefix="middle_left">
    <origin xyz="${track/2} ${wheel_central_offset} ${wheel_vertical_offset}" rpy="0 ${M_PI} 0" />
  </xacro:propbot_wheel>
  <xacro:propbot_wheel wheel_prefix="middle_right">
    <origin xyz="${-track/2} ${wheel_central_offset} ${wheel_vertical_offset}" rpy="0 0 0" />
  </xacro:propbot_wheel>
  <xacro:propbot_wheel wheel_prefix="rear_left">
    <origin xyz="${track/2} ${-wheel_to_wheel + wheel_central_offset} ${wheel_vertical_offset}" rpy="0 ${M_PI} 0" />
  </xacro:propbot_wheel>
  <xacro:propbot_wheel wheel_prefix="rear_right">
    <origin xyz="${-track/2} ${-wheel_to_wheel + wheel_central_offset} ${wheel_vertical_offset}" rpy="0 0 0" />
  </xacro:propbot_wheel>

  <xacro:propbot_decorate />

  <xacro:if value="$(arg laser_enabled)">

    <VLP-16_mount prefix="base" />

    <joint name="laser_mount_joint" type="fixed">
      <origin xyz="$(arg laser_xyz)" rpy="$(arg laser_rpy)" />
      <parent link="top_plate_link" />
      <child link="base_laser_mount" />
    </joint>
  </xacro:if>

  <xacro:if value="$(arg rgbd_camera_enabled)">

    <xacro:sensor_arch prefix="" parent="top_plate_link">
      <origin xyz="-0.35 0 0.51" rpy="0 0 -3.14"/>
    </xacro:sensor_arch>
    <joint name="rgbd_camera_frame_joint" type="fixed">
      <origin xyz="$(arg rgbd_camera_xyz)" rpy="$(arg rgbd_camera_rpy)" />
      <parent link="sensor_arch_mount_link"/>
      <child link="camera_link"/>
    </joint>

    <realsense_d435 name="camera" parent="sensor_arch_mount_link">
      <origin xyz="$(arg rgbd_camera_xyz)" rpy="$(arg rgbd_camera_rpy)" robot_namespace="$(arg robot_namespace)"/>
     </realsense_d435>
  </xacro:if>

  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>$(arg robot_namespace)</robotNamespace>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin name="imu_controller" filename="libhector_gazebo_ros_imu.so">
      <robotNamespace>$(arg robot_namespace)</robotNamespace>
      <updateRate>50.0</updateRate>
      <bodyName>base_link</bodyName>
      <topicName>imu/data</topicName>
      <accelDrift>0.005 0.005 0.005</accelDrift>
      <accelGaussianNoise>0.005 0.005 0.005</accelGaussianNoise>
      <rateDrift>0.005 0.005 0.005 </rateDrift>
      <rateGaussianNoise>0.005 0.005 0.005 </rateGaussianNoise>
      <headingDrift>0.005</headingDrift>
      <headingGaussianNoise>0.005</headingGaussianNoise>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin name="gps_controller" filename="libhector_gazebo_ros_gps.so">
      <robotNamespace>$(arg robot_namespace)</robotNamespace>
      <updateRate>40</updateRate>
      <bodyName>base_link</bodyName>
      <frameId>base_link</frameId>
      <topicName>navsat/fix</topicName>
      <velocityTopicName>navsat/vel</velocityTopicName>
      <referenceLatitude>$(arg spawn_lat)</referenceLatitude>
      <referenceLongitude>$(arg spawn_long)</referenceLongitude>
      <referenceHeading>0</referenceHeading>
      <referenceAltitude>0</referenceAltitude>
      <drift>0.0001 0.0001 0.0001</drift>
    </plugin>
  </gazebo>

</robot>