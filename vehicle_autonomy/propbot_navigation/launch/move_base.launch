<?xml version="1.0"?>
<!--
Software License Agreement (BSD)
\file      description.launch
\authors   Paul Bovbel <pbovbel@clearpathrobotics.com>, Prasenjit Mukherjee <pmukherj@clearpathrobotics.com>
\copyright Copyright (c) 2015, Clearpath Robotics, Inc., All rights reserved.
Redistribution and use in source and binary forms, with or without modification, are permitted provided that
the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the
   following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
   following disclaimer in the documentation and/or other materials provided with the distribution.
 * Neither the name of Clearpath Robotics nor the names of its contributors may be used to endorse or promote
   products derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WAR-
RANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, IN-
DIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE
)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<launch>

  <arg name="static_map" default="false"/>

  <arg name="laser_enabled" default="$(optenv PROPBOT_VLP-16_ENABLED false)" />
  <arg name="rgbd_camera_enabled" default="$(optenv PROPBOT_REALSENSE_ENABLED false)" />

  <!-- convert lidar pointcloud to laser scan for costmap input -->
  <group if="$(arg laser_enabled)">
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="lidar_pc_to_ls" output="screen">
        <remap from="cloud_in" to="velodyne/points"/>
        <remap from="scan" to="velodyne/scan"/>
        <rosparam>
        <!-- Leave empty to output scan in the pointcloud frame -->
            target_frame: base_link 
            tolerance: 1.0
            min_height: 0.05
            max_height: 1.5

            angle_min: -3.1415926535897931
            angle_max: 3.1415926535897931
            angle_increment: 0.005 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.45
            range_max: 15
            use_inf: true
  <!-- 
            Concurrency level, affects number of pointclouds queued for processing and number of threads used
            0 : Detect number of cores
            1 : Single threaded
            2->inf : Parallelism level -->
            concurrency_level: 1
        </rosparam>
      </node>
  </group>

  <!-- convert rgbd camera point cloud to laser scan for costmap input -->
  <group if="$(arg rgbd_camera_enabled)">
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="rgdb_camera_pc_to_ls" output="screen">
        <remap from="cloud_in" to="camera/depth/points"/>
        <remap from="scan" to="camera/scan"/>
        <rosparam>
        <!-- Leave empty to output scan in the pointcloud frame -->
            target_frame: base_link 
            tolerance: 1.0
            min_height: 0.05
            max_height: 1.5

            angle_min: -0.602 # -34.5*M_PI/180.0
            angle_max: 0.602 # 34.5*M_PI/180.0
            angle_increment: 0.005 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.45
            range_max: 8
            use_inf: true
<!-- 
            Concurrency level, affects number of pointclouds queued for processing and number of threads used
            0 : Detect number of cores
            1 : Single threaded
            2->inf : Parallelism level -->
            concurrency_level: 1
        </rosparam>
    </node>
  </group>

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">

    <param name="base_global_planner" value="global_planner/GlobalPlanner"/>
    <param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS"/>
    <rosparam file="$(find propbot_navigation)/config/planner.yaml" command="load"/>

    <!-- observation sources located in costmap_common.yaml -->
    <rosparam file="$(find propbot_navigation)/config/costmap_common.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find propbot_navigation)/config/costmap_common.yaml" command="load" ns="local_costmap" />

    <!-- local costmap, needs size -->
    <rosparam file="$(find propbot_navigation)/config/costmap_local.yaml" command="load" ns="local_costmap" />

    <!-- static global costmap, static map provides size -->
    <rosparam file="$(find propbot_navigation)/config/costmap_global_static.yaml" command="load" ns="global_costmap" if="$(arg static_map)"/>
    
    <!-- global costmap with laser -->
    <rosparam file="$(find propbot_navigation)/config/costmap_global_slam.yaml" command="load" ns="global_costmap" unless="$(arg static_map)"/>

  </node>

</launch>
